#!/bin/bash
# variable values hint:
#    SRC: /root/armbian
#   DEST: /root/armbian/output

# example:
# 1:1.0.2 --> 1%3a1.0.2
jethome_escape_deb_version_epoch() {
	if [ -n "$1" ] ; then
		local version=$1
		echo "$version" | sed -e 's/^\([0-9]\):\(.*\)$/\1%3a\2/'
	else
		echo "${FUNCNAME[0]}(): Null parameter passed to this function"
	fi
}

FIXED_IMAGE_SIZE=

JETHOME_UBOOT_PACKAGE_VERSION=1:1.0.4
JETHOME_UBOOT_PACKAGE_ESCAPED_VERSION=$(jethome_escape_deb_version_epoch $JETHOME_UBOOT_PACKAGE_VERSION)

JETHOME_LINUX_IMAGE_PACKAGE_VERSION=21.0.2

JETHOME_BOARD_PACKAGE_VERSION=1:1.0.0
JETHOME_BOARD_PACKAGE_ESCAPED_VERSION=$(jethome_escape_deb_version_epoch $JETHOME_BOARD_PACKAGE_VERSION)

SERIALCON='ttyAML0:115200'

convert_armbian_image() {
	if [[ -n "$1" && -n "$2" ]]; then
		local IMG_FILE=$1
		local CONVERT_TO=$2
		local IMG_FILE_BASENAME
		IMG_FILE_BASENAME=$(basename "$IMG_FILE" .img) || exit 1
		[[ -n "${JETHOME_CUSTOMIZATION_NAME}" ]] && \
			IMG_FILE_BASENAME=${IMG_FILE_BASENAME%_${JETHOME_CUSTOMIZATION_NAME}}
		cd "$SRC" || exit 1

		echo

		echo "###################"
		echo "###### ${CONVERT_TO} ######"
		echo "###################"

		echo

		cd "$SRC/jethome/convert_armbian_image/convert_armbian_to_${CONVERT_TO}" || exit 1

		JETHOME_CUSTOMIZATION_NAME=$JETHOME_CUSTOMIZATION_NAME "./convert_armbian_img_to_${CONVERT_TO}_img.sh" "$IMG_FILE" "$DEST/images/${IMG_FILE_BASENAME}_${CONVERT_TO}${JETHOME_CUSTOMIZATION_NAME:+_$JETHOME_CUSTOMIZATION_NAME}.img" || exit 1

		cd "$SRC" || exit 1

	else
		echo "${FUNCNAME[0]}(): Null parameter passed to this function"
	fi
}

post_build_image()
{
	if [ -n "$1" ] ; then
		local IMG_FILE=$1
		cp -fv "$USERPATCHES_PATH/overlay/debs"/*.deb "$DEB_STORAGE/" || exit 1

		cp -fv "$SRC/cache/sources/$LINUXSOURCEDIR/arch/arm64/boot/dts/amlogic"/jethome-j*v1.dtb "$DEST/" || exit 1

		convert_armbian_image "$IMG_FILE" "j80"
		convert_armbian_image "$IMG_FILE" "j100"
	else
		echo "${FUNCNAME[0]}(): Null parameter passed to this function"
	fi
}

write_uboot_platform()
{
	if [[ "$2" != /dev/loop* ]]; then
		local mmcblk_prefix
		mmcblk_prefix=$(echo "$2" | grep -Po "mmcblk\d")

		logger "${FUNCNAME[0]}(): mmcblk_prefix = $mmcblk_prefix" 

		if [[ -n "$mmcblk_prefix" ]]; then

			# unset force-read-only flag
			echo 0 > "/sys/block/${mmcblk_prefix}boot0/force_ro"
			echo 0 > "/sys/block/${mmcblk_prefix}boot1/force_ro"
			logger "/sys/block/mmcblk1boot0/force_ro values after unsetting read-only flag: $(</sys/block/mmcblk1boot0/force_ro)"
			logger "/sys/block/mmcblk1boot1/force_ro values after unsetting read-only flag: $(</sys/block/mmcblk1boot0/force_ro)"

			local uboot_name=
			if grep -Eq "^GXL.+S905W" /sys/devices/soc0/soc_id; then
				uboot_name=u-boot-jethome_armbian_j80_v1.bin
			elif grep -Eq "^AXG" /sys/devices/soc0/soc_id; then
				uboot_name=u-boot-jethome_armbian_j100_v1.bin
			else
				logger "${FUNCNAME[0]}(): SoC detection failed. Unable to install u-boot."
			fi

			logger "${FUNCNAME[0]}(): uboot_name = $uboot_name"

			if [[ -n "$uboot_name" ]]; then

					local uboot_size_in_kbytes=$(($(stat --printf "%s" "$1/$uboot_name")/1024))
					local uboot_offset=1 # 512 bytes in dd
					logger "${FUNCNAME[0]}(): uboot_size_in_kbytes = $uboot_size_in_kbytes"
					logger "${FUNCNAME[0]}(): uboot_offset = $uboot_offset"

					local result=

					if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}boot0" conv=fsync status=progress; then
						if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}boot1" conv=fsync status=progress; then
							if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}p1" conv=fsync status=progress; then
								logger "do defenv"
								local env_size_in_mbytes=$(($(blockdev --getsize64 "/dev/${mmcblk_prefix}p5")/1024/1024))
								logger "${FUNCNAME[0]}(): env_size_in_mbytes = $env_size_in_mbytes"

								if dd bs=1M count=$env_size_in_mbytes if=/dev/zero of="/dev/${mmcblk_prefix}p5" conv=fsync status=progress; then
									sync
									result=1
								fi
							fi
						fi
					fi

					if [[ -n "$result" ]]; then
						logger "${FUNCNAME[0]}(): u-boot successfulley installed"
					else
						logger "${FUNCNAME[0]}(): dd commands failed. Unable to install u-boot."
						return 1
					fi
			else
				return 1
			fi
		else
			logger "${FUNCNAME[0]}(): mmcblk_prefix is empty. Unable to install u-boot."
			return 1
		fi
	else
		echo "${FUNCNAME[0]}(): loop device in destination argument. Do nothing."
	fi
}

setup_write_uboot_platform()
{
	:
}

uboot_custom_postprocess()
{
	:
}

get_jethome_uboot_version()
{
	if [ -n "$1" ] ; then
		local path_suffix=$1

		local result
		local u_boot_date
		local u_boot_time
		local u_boot_release

		u_boot_date=$(grep -Po '(?<=U_BOOT_DATE ")[^"]+' "$SRC/jethome/convert_armbian_image/$path_suffix/timestamp_autogenerated.h")
		u_boot_time=$(grep -Po '(?<=U_BOOT_TIME ")[^"]+' "$SRC/jethome/convert_armbian_image/$path_suffix/timestamp_autogenerated.h")
		u_boot_release=$(<"$SRC/jethome/convert_armbian_image/$path_suffix/uboot.release")
		result="$u_boot_release ($u_boot_date - $u_boot_time)"
		result=${result// /_}
		if [[ -n "$u_boot_date" && -n "$u_boot_time" && -n "$u_boot_release" && -n "$result" ]]; then
			echo "$result"
		fi
	fi
}

build_jethome_uboot_deb()
{
	# read uboot version
	local uboot_version
	local uboot_version_j80
	uboot_version_j80=$(get_jethome_uboot_version "convert_armbian_to_j80/BOOTLOADER")
	[[ -z "$uboot_version_j80" ]] && exit_with_error "uboot_version_j80 is empty"
	local uboot_version_j100
	uboot_version_j100=$(get_jethome_uboot_version "convert_armbian_to_j100")
	[[ -z "$uboot_version_j100" ]] && exit_with_error "uboot_version_j100 is empty"
	uboot_version=jethome-j80=$uboot_version_j80,jethome-j100=$uboot_version_j100

	# create directory structure for the .deb package
	local uboot_name=${CHOSEN_UBOOT}_${JETHOME_UBOOT_PACKAGE_ESCAPED_VERSION}_${ARCH}
	rm -rf "$SRC/.tmp/$uboot_name"
	mkdir -p "$SRC/.tmp/$uboot_name/usr/lib"/{u-boot,"$uboot_name"} "$SRC/.tmp/$uboot_name/DEBIAN"

	cp -v "$SRC/jethome/convert_armbian_image/convert_armbian_to_j80/BOOTLOADER/bootloader" "${SRC}/.tmp/${uboot_name}/usr/lib/${uboot_name}"/u-boot-jethome_armbian_j80_v1.bin
	cp -v "$SRC/jethome/convert_armbian_image/convert_armbian_to_j100/bootloader.PARTITION" "${SRC}/.tmp/${uboot_name}/usr/lib/${uboot_name}"/u-boot-jethome_armbian_j100_v1.bin

	# declare -f on non-defined function does not do anything
	cat <<-EOF > "${SRC}/.tmp/${uboot_name}/usr/lib/u-boot/platform_install.sh"
	DIR=/usr/lib/$uboot_name
	$(declare -f write_uboot_platform)
	$(declare -f write_uboot_platform_mtd)
	$(declare -f setup_write_uboot_platform)
	EOF

	# set up control file
	cat <<-EOF > "${SRC}/.tmp/${uboot_name}/DEBIAN/control"
	Package: linux-u-boot-${BOARD}-${BRANCH}
	Version: $JETHOME_UBOOT_PACKAGE_VERSION
	Architecture: $ARCH
	Maintainer: Example Examplov <example@example.com>
	Installed-Size: 1
	Section: kernel
	Priority: optional
	Provides: armbian-u-boot
	Replaces: armbian-u-boot
	Conflicts: armbian-u-boot, u-boot-sunxi
	Description: Uboot loader $uboot_version
	EOF

	cat <<-'EOF' > "${SRC}/.tmp/${uboot_name}/DEBIAN/postinst"
	#!/bin/bash

	# update boot loader
	[[ -f /usr/lib/u-boot/platform_install.sh ]] && source /usr/lib/u-boot/platform_install.sh
	#recognize_root
	root_uuid=$(sed -e 's/^.*root=//' -e 's/ .*$//' < /proc/cmdline)
	root_partition=$(blkid | tr -d '":' | grep "${root_uuid}" | awk '{print $1}')
	root_partition_device="${root_partition::-2}"
	write_uboot_platform "$DIR" "${root_partition_device}"

	exit 0
	EOF
	chmod -v +x "${SRC}/.tmp/${uboot_name}/DEBIAN/postinst"

	display_alert "Building deb" "${uboot_name}.deb" "info"
	fakeroot dpkg-deb -b "${SRC}/.tmp/${uboot_name}" "${SRC}/.tmp/${uboot_name}.deb" >> "${DEST}"/debug/output.log 2>&1
	rm -rf "${SRC}/.tmp/${uboot_name}"

	[[ ! -f $SRC/.tmp/${uboot_name}.deb ]] && exit_with_error "Building u-boot package failed"

	mv "${SRC}/.tmp/${uboot_name}.deb" "${DEB_STORAGE}/"
}

get_jethome_release_version()
{
	local current_commit_sha
	current_commit_sha=$(git -C "$SRC" rev-parse HEAD)
	# echo "${FUNCNAME[0]}(): current_commit_sha=$current_commit_sha"
	if [[ -n "$current_commit_sha" ]]; then
		local tags_in_commit
		tags_in_commit=$(git -C "$SRC" tag --contains "$current_commit_sha")
		# echo "${FUNCNAME[0]}(): tags_in_commit=$tags_in_commit"
		if [[ -n "$tags_in_commit" ]]; then
			while read -r tag; do
				# echo "${FUNCNAME[0]}(): tag: $tag"
				if [[ "$tag" = jethome_release_* ]]; then
					local jethome_release_version=${tag#jethome_release_}
					if [[ -n "$jethome_release_version" ]]; then
						echo "$jethome_release_version"
					fi
					break
				fi
			done <<< "$tags_in_commit"
		fi
	fi
}
